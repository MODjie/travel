<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- 配置数据库连接的属性信息 classpath: 的含义是说编译之后，这个文件会存在classes目录下 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>
	<!-- 组件的扫描路径 从包开始 com.etc.dao,com.etc.service 类似这样的语法格式 ,以后还会见到这里会有类似通配符的写法 
		com.etc -->
	<context:component-scan base-package="com.java.travel"></context:component-scan>

	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${driver}"></property>
		<property name="url" value="${url}"></property>
		<property name="username" value="${username}"></property>
		<property name="password" value="${password}"></property>
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- ① 配置和数据源有关 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- ②其他的属性 和映射文件有关的配置信息 -->
		<property name="mapperLocations" value="classpath:com/java/travel/mapping/*.xml">
		</property>
		<!-- 实体包名的路径 -->
		<property name="typeAliasesPackage" value="com.java.travel.entity" />
		<!-- 分页 -->
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<property name="properties">
						<value>
							helperDialect=oracle
							reasonable=true
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!-- shiro的配置 -->
	<!-- 自定义Realm -->
	<bean id="userNamePasswordRealm" class="com.java.travel.realm.UserNamePasswordRealm" />
	<!-- <bean id="telphoneCodeRealm" class="com.java.travel.realm.TelphoneCodeRealm" /> -->
	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 单realm的配置 -->
		<property name="realm" ref="userNamePasswordRealm" /> 
		<!-- 多realm的配置 -->
		<!-- <property name="authenticator" ref="myModularRealmAuthenticator"></property>
		<property name="realms">
			<list>
				<ref bean="userNamePasswordRealm" />
				<ref bean="telphoneCodeRealm" />
			</list>
		</property>	 -->	 
	</bean>
	<!-- 配置多个realm的时候如何认证 -->
	<!-- <bean id="myModularRealmAuthenticator" class="com.java.travel.ModularRealmAuthenticator.MyModularRealmAuthenticator">
		<property name="authenticationStrategy">
			认证策略
			<bean class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"></bean>
			<bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
			<bean class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy"></bean>
		</property>
	</bean> -->
	<!-- Shiro过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 身份认证失败，则跳转到登录页面的配置 -->
		<property name="loginUrl" value="showHome" />
		<!-- 权限认证失败，则跳转到指定页面 -->
		<property name="unauthorizedUrl" value="/unauthorized.jsp" />
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<property name="filterChainDefinitions">
			<value>
				/showHome=anon
				/hasUser=anon
				/getIdentifyCode=anon
				/updatePassword=anon
				/getIdentifyCode=anon
				/hasUserByTel=anon
				/hasUserByNickName=anon
				/toPost=anon
				/getAfterLoadEx=anon
				/getAfterLoadCommentReply=anon
				
				/writeEx=authc
				/exprienceEdit=authc	
				/comment = authc			
			</value>
		</property>
	</bean>

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 开启Shiro注解 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<!-- 配置扫描器 MapperScannerConfigurer 需要用到mybatis-spring.jar -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.java.travel.mapper"></property>
		<!-- 注意这里的是value 不是ref -->
		<property name="sqlSessionFactoryBeanName" value="sessionFactory"></property>
	</bean>

	<!-- 创建事务有关的bean -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 配置MultipartResolver 用于文件上传 使用spring的CommosMultipartResolver -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="104857600" />
		<property name="maxInMemorySize" value="4096" />
	</bean>


</beans>